# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: ubuntu-latest

stages:
- stage: BuildnTest
  displayName: Build and Test the client image
  jobs:  
  - job: ClientTestBuild
    displayName: Build and test the client image
    steps:
    - script: |
       docker build -t vpraveenon/client-test -f client/Dockerfile.dev client/
       docker run -e CI=true vpraveenon/client-test npm run test -- --coverage 

- stage: BuildProdImage
  displayName: Build the production images one by one
  jobs:
    - job: ClientProdBuild
      displayName: Build and push the client image
      steps:
      - task: Docker@2
        inputs:
          containerRegistry: 'DockerHub'
          repository: 'vpraveenon/multi-client'
          command: 'buildAndPush'
          Dockerfile: 'client/Dockerfile'
          tags: |
            latest
            $(Build.BuildId)
    - job: ServerProdBuild
      displayName: Build and push the Server image
      steps:
      - task: Docker@2
        inputs:
          containerRegistry: 'DockerHub'
          repository: 'vpraveenon/multi-server'
          command: 'buildAndPush'
          Dockerfile: 'server/Dockerfile'
          tags: |
            latest
            $(Build.BuildId)
    - job: WorkerProdBuild
      displayName: Build and push the worker image
      steps:
      - task: Docker@2
        inputs:
          containerRegistry: 'DockerHub'
          repository: 'vpraveenon/multi-worker'
          command: 'buildAndPush'
          Dockerfile: 'worker/Dockerfile'
          tags: |
            latest
            $(Build.BuildId)

- stage: DeploytoK8S
  displayName: Deploy the app to K8S
  jobs:
    - job: DeployAll
      displayName: Apply all deployments and services
      steps:
      - task: Kubernetes@1
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'multi-k8s-connection'
          namespace: 'default'
          command: 'apply'
          arguments: '-f k8s'
          secretType: 'dockerRegistry'
          containerRegistryType: 'Container Registry'
          dockerRegistryEndpoint: 'DockerHub'
          forceUpdate: false
    - job: Refreshpods
      displayName: Refresh the server, client and worker pods
      steps:
      - task: Kubernetes@1
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'multi-k8s-connection'
          namespace: 'default'
          command: 'set'
          arguments: 'image deployments/server-deployment server=vpraveenon/multi-server:$(Build.BuildId)'
          secretType: 'dockerRegistry'
          containerRegistryType: 'Container Registry'
          dockerRegistryEndpoint: 'DockerHub'
          forceUpdate: false
      - task: Kubernetes@1
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'multi-k8s-connection'
          namespace: 'default'
          command: 'set'
          arguments: 'image deployments/client-deployment client=vpraveenon/multi-client:$(Build.BuildId)'
          secretType: 'dockerRegistry'
          containerRegistryType: 'Container Registry'
          dockerRegistryEndpoint: 'DockerHub'
          forceUpdate: false
      - task: Kubernetes@1
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'multi-k8s-connection'
          namespace: 'default'
          command: 'set'
          arguments: 'image deployments/worker-deployment worker=vpraveenon/multi-worker:$(Build.BuildId)'
          secretType: 'dockerRegistry'
          containerRegistryType: 'Container Registry'
          dockerRegistryEndpoint: 'DockerHub'
          forceUpdate: false
      
